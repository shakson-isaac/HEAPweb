name: Deploy Backend to Google Cloud Run

on:
  push:
    paths:
      - 'heap/backend/**'
      - '.github/workflows/deploy-backend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Set environment variables
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        REGION: ${{ secrets.REGION }}
        CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
        DOCKER_IMAGE: flask-backend
        DOCKER_TAG: latest
        GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: |
        echo "CLOUD_SQL_CONNECTION_NAME=${PROJECT_ID}:${REGION}:${CLOUD_NAME}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_URI=${REGION}-docker.pkg.dev/${PROJECT_ID}/${PROJECT_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG}" >> $GITHUB_ENV
        echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
        echo "REGION=${REGION}" >> $GITHUB_ENV
        echo "CLOUD_NAME=${CLOUD_NAME}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build \
          --platform linux/amd64 \
          -t "${{ env.DOCKER_IMAGE_URI }}" \
          ./heap/backend

    - name: Push Docker image to Artifact Registry
      run: |
        docker push "${{ env.DOCKER_IMAGE_URI }}"

    - name: Deploy to Google Cloud Run
      run: |
        if [ -z "${{ env.DOCKER_IMAGE }}" ]; then
          echo "Error: DOCKER_IMAGE is not set." && exit 1
        fi
        gcloud run deploy "${{ env.DOCKER_IMAGE }}" \
          --image "${{ env.DOCKER_IMAGE_URI }}" \
          --platform managed \
          --region "${{ env.REGION }}" \
          --allow-unauthenticated \
          --memory=1Gi \
          --add-cloudsql-instances "${{ env.CLOUD_SQL_CONNECTION_NAME }}" \
          --update-env-vars "GCS_BUCKET=${{ secrets.GCS_BUCKET }},CLOUD_SQL_CONNECTION_NAME=${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }}"

    - name: Verify deployment
      run: |
        BACKEND_URL=$(gcloud run services describe "${{ env.DOCKER_IMAGE }}" \
          --platform managed \
          --region "${{ env.REGION }}" \
          --project="${{ env.PROJECT_ID }}" \
          --format "value(status.url)")
        echo "Backend deployed at: $BACKEND_URL"

        for i in {1..10}; do  # Increased retry attempts to 10
          echo "Attempt $i: Checking service..."
          RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null "$BACKEND_URL")
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Service is live!"
            exit 0
          else
            echo "Service not ready (HTTP $RESPONSE), retrying in 10s..."  # Log HTTP response code
          fi
          sleep 10  # Increased delay to 10 seconds
        done

        echo "Backend never responded (503 or crash)."
        exit 1

